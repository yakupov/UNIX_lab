#!/bin/bash -e

function downloadFile {
	DOWNLOADPATH=`cat $CURRFILE | grep DOWNLOADPATH | awk '{ split ($0, arr, "="); print arr[2]; }'`
	DOWNLOADDIR=`cat $CURRFILE | grep DOWNLOADDIR | awk '{ split ($0, arr, "="); print arr[2]; }'`
	URL=`cat $CURRFILE | grep URL | awk '{ split ($0, arr, "="); print arr[2]; }'`
	REFERRER=`cat $CURRFILE | grep REFERRER | awk '{ split ($0, arr, "="); print arr[2]; }'`
	
	TMP=(`df $DOWNLOADDIR | awk '{print $4}'`)
	AVAILABLE=${TMP[1]}
	NEEDED=`$GETELEMFUNC --spider $URL 2>&1 | grep Length | awk '{print $2;}'`

	if [ ! -z "`echo $NEEDED | egrep '^([0-9]*|\d*\.\d{1}?\d*)$'`" ]; then
		if [ $NEEDED -gt $AVAILABLE ]; then
			echo "not enough space on disk"
			exit 1
		fi
	fi

	echo "fetching $URL..."
	$GETELEMFUNC 1>/dev/null 2>/dev/null -c -O $DOWNLOADPATH --referer=$REFERRER $URL #continue, if possible
#	$GETELEMFUNC -c -O $DOWNLOADPATH --referer=$REFERRER $URL #continue, if possible
}

function processLink {
	CURRNAME=`echo $URL | sed 's/\//_/g; s/ /_/g'`
	REFNAME=`echo $REFERRER | sed 's/\//_/g; s/ /_/g'`

	if [ -f $QQEDIR"/"$CURRNAME ]; then
		echo "$URL is already in download queue"
	else
		REQFILENAME=$QQEDIR"/"$CURRNAME".f4mereq"

		DOWNLOADPATH=~/Downloads/fetched4you

		if [ ! -d $DOWNLOADPATH ]; then
			mkdir $DOWNLOADPATH
			echo "Created $DOWNLOADPATH"
		fi

		DOWNLOADPATH=$DOWNLOADPATH"/"$REFNAME
		if [ ! -d $DOWNLOADPATH ]; then
			mkdir $DOWNLOADPATH
			echo "Created $DOWNLOADPATH"
		fi

		echo "URL=$URL" > $REQFILENAME
		echo "REFERRER=$REFERRER" >> $REQFILENAME
		echo "DOWNLOADDIR=$DOWNLOADPATH" >> $REQFILENAME
		DOWNLOADPATH=$DOWNLOADPATH"/"$CURRNAME
		echo "Queueing download of $URL to $DOWNLOADPATH"
		echo "DOWNLOADPATH=$DOWNLOADPATH" >> $REQFILENAME
	fi
}


function processQueue {
	LOCKFILE=$QQEDIR/.fetch4me_lock

	if [ -f $LOCKFILE ]; then
		##check, if that process is still running
		OLDPROC=`cat $LOCKFILE`
		echo "pid $OLDPROC found in $QQEDIR"
		PROC=(`ps -e | grep fetch4me | grep -v "grep" | awk '{print $1;}'`)

		for ((i=0; i<${#PROC[@]}; i++)); do
			if [ ${PROC[$i]} = OLDPROC ]; then
				echo "Daemon is already running in $QQEDIR"
				exit 0
			fi
		done
	fi

	#daemonize, 'cause daemon is not running
	echo "current PID: $$"
	echo $$ > $LOCKFILE
	trap "" SIGHUP

	#process queue
	ls $QQEDIR > $QQEDIR"/.queue"
	until [ -z "`ls $QQEDIR | grep ".f4mereq"`" ]; do
		QUEUE=(`ls $QQEDIR | grep ".f4mereq"`)
		CURRFILE=$QQEDIR"/"${QUEUE[0]}
		echo "Processing request $CURRFILE" > $QQEDIR"/.status"
		downloadFile
		echo "`date` $REFERRER $URL" >> $QQEDIR"/.finished"
		rm $CURRFILE
		ls $QQEDIR > $QQEDIR"/.queue"
	done

	echo "finished" > $QQEDIR"/.status"
	echo "done, all ok"
	rm $LOCKFILE
	exit 0
}


DOWNLOADPATH=~/Downloads
if [ ! -d $DOWNLOADPATH ]; then
	echo 1>&2 "no download dir"
	exit 1
fi

GETELEMFUNC=`cat ~/.fetch4merc | grep GETELEMFUNC | awk '{ split ($0, arr, "="); print arr[2]; }'`
QQEDIR=`cat ~/.fetch4merc | grep QQEDIR | awk '{ split ($0, arr, "="); print arr[2]; }'`

#convert relative path to abs. path
TMP=`echo $QQEDIR | sed 's/~//g'`
if [ ! "$TMP" = "$QQEDIR" ]; then
	QQEDIR=$HOME$TMP
fi

FIRSTARG=0

if [ $1 = "-w" ]; then
	QQEDIR=$2
	FIRSTARG=2
	if [ $3 = "-r" ]; then
		REFERRER=$4
		FIRSTARG=4
	fi
elif [ $1 = "-r" ]; then
	REFERRER=$2
	FIRSTARG=2
	if [ $3 = "-w" ]; then
		QQEDIR=$4
		FIRSTARG=4
	fi
fi

if [ -z $QQEDIR ]; then
	QQEDIR=~/.fetch4me
fi

if [ -z $GETELEMFUNC ]; then
	GETELEMFUNC="wget"
fi

if [ ! -d $QQEDIR ]; then
	echo 1>&2 "working $QQEDIR dir does not exist"
	exit 1
fi

which $GETELEMFUNC 1>/dev/null 2>/dev/null
if [ $? -ne 0 ]; then
	echo 1>&2 "elemfunc $GETELEMFUNC does not exist"
	exit 1
fi

if [ ! -z $REFERRER ]; then
	$GETELEMFUNC --spider 1>/dev/null 2>/dev/null $REFERRER
fi

ARGS=("$@")

echo $QQEDIR
echo $FIRSTARG
echo "checking links..."
for ((i=$FIRSTARG; i<${#ARGS[@]}; i++)); do
	if [ ${ARGS[${i}]} = "-r" ]; then
		i=`expr $i + 1`
		REFERRER=${ARGS[$i]}
		echo "checking referrer: $REFERRER"
		$GETELEMFUNC --spider 1>/dev/null 2>/dev/null $REFERRER
	else
		TMP=${ARGS[$i]}
		echo "checking $TMP"
		$GETELEMFUNC --spider 1>/dev/null 2>/dev/null $TMP
	fi
done 

echo "generating download requests..."
for ((i=$FIRSTARG; i<${#ARGS[@]}; i++)); do
	if [ ${ARGS[${i}]} = "-r" ]; then
		i=`expr $i + 1`
	else
		URL=${ARGS[$i]}
		processLink
	fi
done 

processQueue
